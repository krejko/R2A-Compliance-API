using System;
using System.Threading;
using System.Threading.Tasks;
using BSP.ReportDataConverter.Implementations;
using MediatR;
using NLog;
using R2A.ReportApi.Service.Infrastructure;
using R2A.ReportApi.Service.Model;
using Tester.Model;

namespace R2A.ReportApi.Service.ReportSubmission.Pipelines
{
    public class TemplateRequirementCheckBehavior : IPipelineBehavior<ReportSubmissionRequest, Unit>
    {
        private readonly Settings _settings;
        private readonly ILogger _logger;

        public TemplateRequirementCheckBehavior(ILogFactory logFactory, Settings settings)
        {
            _settings = settings;
            _logger = logFactory.GetLogger<TemplateRequirementCheckBehavior>();
        }

        public async Task<Unit> Handle(ReportSubmissionRequest request, CancellationToken cancellationToken,
            RequestHandlerDelegate<Unit> next)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (request.IsModelValid && request.IsReportValid)
            {
                try
                {
                    ValidateTemplateRequirement(request);
                }
                catch (Exception e)
                {
                    _logger.Error(e, $"An error occured during template validation. ReportStatus ID: {request.Id}.");
                    throw;
                }
            }

            return await next();
        }

        public void ValidateTemplateRequirement(ReportSubmissionRequest request)
        {
            if (request.ReportingPeriod?.Period != null &&
                request.ReportData != null)
            {
                var bspTemplateRequirementChecker = new BspTemplateRequirementChecker(
                    request.SubmissionInfo.Undertaking, request.SubmissionInfo.ReportCode,
                    request.ReportingPeriod.Period.Value,
                    _settings.DbConnectionString);

                //var data = (Dictionary<string, object>) request.ReportData.Data[request.ReportData.XmlRootNode];

                request.ReportData.ReportConfig.Forms.ForEach(form =>
                {
                    //If it's required it's handeled by XSD and if it's autogenerated it is not supposed to be present
                    if (form.Required || form.IsAutogenerated)
                    {
                        return;
                    }

                    //Data is alerady present
                    if (request.ReportData.ReportedForms.Contains(form.XmlNode))
                    {
                        return;
                    }

                    if (bspTemplateRequirementChecker.IsRequired(form.XmlNode))
                    {
                        request.ProcessingResult.Add(
                            ValidationRule.Error(ValidationRuleConstant.TemplateNotIncluded,
                                $"Mandatory template {form.XmlNode} is not submitted within XML file")
                        );
                        request.IsReportValid = false;
                    }
                });
            }
        }
    }
}